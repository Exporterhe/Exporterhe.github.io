<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Canal增量同步rabbitmq构建ES索引</title>
    <link href="/2025/04/20/%E5%9F%BA%E4%BA%8ECanal%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5rabbitmq%E6%9E%84%E5%BB%BAES%E7%B4%A2%E5%BC%95/"/>
    <url>/2025/04/20/%E5%9F%BA%E4%BA%8ECanal%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5rabbitmq%E6%9E%84%E5%BB%BAES%E7%B4%A2%E5%BC%95/</url>
    
    <content type="html"><![CDATA[<h3 id="1-定义基础消息实体类​"><a href="#1-定义基础消息实体类​" class="headerlink" title="1. 定义基础消息实体类​"></a>1. 定义基础消息实体类​</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalMessage</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> String database;<br>    <span class="hljs-keyword">private</span> String table;<br>    <span class="hljs-keyword">private</span> String type;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; data;      <span class="hljs-comment">// 动态数据（根据表结构定义具体类型）</span><br>    <span class="hljs-keyword">private</span> List&lt;T&gt; old;<br>    <span class="hljs-keyword">private</span> Long ts;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; pkNames;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-动态数据映射​"><a href="#2-动态数据映射​" class="headerlink" title="2. 动态数据映射​"></a>2. 动态数据映射​</h3><p> 直接解析为 Map 或 JSONObject​​<br>适用于无需强类型校验的场景</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;canal.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(String message)</span> &#123;<br>    <span class="hljs-type">JsonNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> objectMapper.readTree(message);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> root.get(<span class="hljs-string">&quot;table&quot;</span>).asText();<br>    <span class="hljs-type">JsonNode</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> root.get(<span class="hljs-string">&quot;data&quot;</span>);<br>    <span class="hljs-comment">// 根据表名动态处理数据</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;user&quot;</span>.equals(table)) &#123;<br>        List&lt;User&gt; users = objectMapper.convertValue(data, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;User&gt;&gt;() &#123;&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="监听消费队列-同步回写到ES"><a href="#监听消费队列-同步回写到ES" class="headerlink" title="监听消费队列 同步回写到ES"></a>监听消费队列 同步回写到ES</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CanalListerPmsProduct</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> RestHighLevelClient esClient;<br><span class="hljs-meta">@RabbitListener(queues = &quot;pms_sku_sync_queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listener</span><span class="hljs-params">(Message message,  Channel channel,</span><br><span class="hljs-params">                     <span class="hljs-meta">@Header(AmqpHeaders.DELIVERY_TAG)</span> <span class="hljs-type">long</span> deliveryTag)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 获取消息体的字节数组</span><br>        log.info(<span class="hljs-string">&quot;canal监听到消息message：&#123;&#125;&quot;</span>, message);<br><br>        <span class="hljs-comment">// 定义泛型类型：CanalMessage&lt;SkuInfoEntity&gt;</span><br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">byte</span>[] body = message.getBody();<br>        <span class="hljs-comment">// 将字节数组转换为字符串</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">messageBody</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(body);<br>        log.info(<span class="hljs-string">&quot;canal监听到消息：&#123;&#125;&quot;</span>, messageBody);<br><span class="hljs-comment">//        Type type = new TypeToken&lt;List&lt;SkuInfoEntity&gt;&gt;()&#123;&#125;.getType();</span><br>        <span class="hljs-type">CanalMessage</span> <span class="hljs-variable">canalMessage</span> <span class="hljs-operator">=</span> gson.fromJson(messageBody, CanalMessage.class);<br>        log.info(<span class="hljs-string">&quot;canal消息内容：&#123;&#125;&quot;</span>, canalMessage);<br><br>        <span class="hljs-keyword">if</span>(canalMessage.getTable().equals(<span class="hljs-string">&quot;pms_sku_info&quot;</span>))&#123;<br>           <span class="hljs-comment">// 构建ES文档</span><br>            List&lt;Map&gt; skuInfoEntities =gson.fromJson(gson.toJson(canalMessage.getData()),List.class);<br>            <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; skuInfoEntity : skuInfoEntities) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">redisKey</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;pms_sku_info:&quot;</span> + skuInfoEntity.get(<span class="hljs-string">&quot;sku_id&quot;</span>);<br>                <span class="hljs-keyword">if</span>(!redisTemplate.opsForValue().setIfAbsent(redisKey, <span class="hljs-string">&quot;processing&quot;</span>, <span class="hljs-number">30</span>, TimeUnit.MINUTES))&#123;<br>                    log.warn(<span class="hljs-string">&quot;重复消费，直接ack|skuid=&#123;&#125;&quot;</span>,skuInfoEntity.get(<span class="hljs-string">&quot;sku_id&quot;</span>));<br>                    channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>                Map&lt;String, Object&gt; esDoc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>                esDoc.put(<span class="hljs-string">&quot;sku_id&quot;</span>, skuInfoEntity.get(<span class="hljs-string">&quot;sku_id&quot;</span>));<br>                esDoc.put(<span class="hljs-string">&quot;price&quot;</span>, skuInfoEntity.get(<span class="hljs-string">&quot;price&quot;</span>)); <br>                esDoc.put(<span class="hljs-string">&quot;sku_name&quot;</span>, skuInfoEntity.get(<span class="hljs-string">&quot;sku_name&quot;</span>));<br>                <span class="hljs-comment">// 批量写入es</span><br>                <span class="hljs-type">IndexRequest</span> <span class="hljs-variable">pmsSkuInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;pms_sku_info&quot;</span>).id(skuInfoEntity.get(<span class="hljs-string">&quot;sku_id&quot;</span>).toString())<br>                        .source(esDoc);<br><br>                <span class="hljs-type">IndexResponse</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> esClient.index(pmsSkuInfo, RequestOptions.DEFAULT);<br>                log.info(<span class="hljs-string">&quot;同步成功es | index=&#123;&#125;&quot;</span>, index);<br>                <span class="hljs-comment">// 删除锁</span><br>                redisTemplate.delete(redisKey);<br>                <span class="hljs-comment">//手动确认消息</span><br>                channel.basicAck(deliveryTag, <span class="hljs-literal">false</span>);<br>                log.info(<span class="hljs-string">&quot;同步成功 | skuId=&#123;&#125;&quot;</span>, skuInfoEntity.get(<span class="hljs-string">&quot;sku_id&quot;</span>));<br>            &#125;<br><br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        log.error(<span class="hljs-string">&quot;处理消息时发生异常&quot;</span>, e);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 获取重试次数</span><br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> message.getMessageProperties().getHeader(<span class="hljs-string">&quot;x-retry-count&quot;</span>);<br>            <span class="hljs-comment">// 重试3次后进入死信队列（网页3）</span><br>            <span class="hljs-keyword">if</span>(retryCount == <span class="hljs-literal">null</span>) &#123;<br>                retryCount = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (retryCount &lt; <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-comment">// 添加重试次数请求头</span><br>                message.getMessageProperties().setHeader(<span class="hljs-string">&quot;x-retry-count&quot;</span>, retryCount + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 发送到死信交换机，进入延迟队列</span><br><span class="hljs-comment">//                channel.basicPublish(&quot;canal.topic&quot;, &quot;pms_sku_sync_queue&quot;, null, message.getBody());</span><br>                channel.basicNack(deliveryTag, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 重试</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//超过重试次数 转人工处理</span><br>                channel.basicReject(deliveryTag, <span class="hljs-literal">false</span>); <span class="hljs-comment">// 丢弃或转死信</span><br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>            log.error(<span class="hljs-string">&quot;ACK操作异常&quot;</span>, ex);<br>        &#125;<br>    &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SkuSyncMessage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String skuId;       <span class="hljs-comment">// 对应ES的sku_id</span><br>    <span class="hljs-keyword">private</span> BigDecimal price;   <span class="hljs-comment">// 原价（需*100转scaled_float）</span><br>    <span class="hljs-keyword">private</span> String skuName;     <span class="hljs-comment">// 带分词字段</span><br>    <span class="hljs-keyword">private</span> String brandId;      <span class="hljs-comment">// 转short类型</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">retryCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 重试计数器（网页3）</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>响应结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">2025-04-20 20:53:42.970  INFO 59220 --- [ntContainer#0-1] c.m.canal.CanalListerPmsProduct          : canal监听到消息message：(Body:&#x27;[B@6ddb51a5(byte[1064])&#x27; MessageProperties [headers=&#123;&#125;, contentLength=0, redelivered=false, receivedExchange=canal.topic, receivedRoutingKey=pms_sku_sync_queue, deliveryTag=1, consumerTag=amq.ctag-F2aUV6TgDm21hxpi4QKHjA, consumerQueue=pms_sku_sync_queue])<br>2025-04-20 20:53:42.972  INFO 59220 --- [ntContainer#0-1] c.m.canal.CanalListerPmsProduct          : canal监听到消息：&#123;&quot;data&quot;:[&#123;&quot;sku_id&quot;:&quot;6&quot;,&quot;spu_id&quot;:&quot;0&quot;,&quot;sku_name&quot;:&quot;经济款Maroon登录77&quot;,&quot;sku_desc&quot;:&quot;不会今年提高全国标准比较规定不能责任这里.&quot;,&quot;catalog_id&quot;:&quot;201203004&quot;,&quot;brand_id&quot;:&quot;3001&quot;,&quot;sku_default_img&quot;:&quot;https://picsum.photos/301/64&quot;,&quot;sku_title&quot;:&quot;昊嘉官方旗舰商品&quot;,&quot;sku_subtitle&quot;:&quot;拥有个人积分行业原因专业类别北京地方.&quot;,&quot;price&quot;:&quot;89.1800&quot;,&quot;sale_count&quot;:&quot;271&quot;&#125;],&quot;database&quot;:&quot;mall-pms&quot;,&quot;es&quot;:1745153622000,&quot;id&quot;:23,&quot;isDdl&quot;:false,&quot;mysqlType&quot;:&#123;&quot;sku_id&quot;:&quot;bigint(20)&quot;,&quot;spu_id&quot;:&quot;bigint(20)&quot;,&quot;sku_name&quot;:&quot;varchar(255)&quot;,&quot;sku_desc&quot;:&quot;varchar(2000)&quot;,&quot;catalog_id&quot;:&quot;bigint(20)&quot;,&quot;brand_id&quot;:&quot;bigint(20)&quot;,&quot;sku_default_img&quot;:&quot;varchar(255)&quot;,&quot;sku_title&quot;:&quot;varchar(255)&quot;,&quot;sku_subtitle&quot;:&quot;varchar(2000)&quot;,&quot;price&quot;:&quot;decimal(18,4)&quot;,&quot;sale_count&quot;:&quot;bigint(20)&quot;&#125;,&quot;old&quot;:[&#123;&quot;sku_name&quot;:&quot;经济款Maroon登录7&quot;&#125;],&quot;pkNames&quot;:[&quot;sku_id&quot;],&quot;sql&quot;:&quot;&quot;,&quot;sqlType&quot;:&#123;&quot;sku_id&quot;:-5,&quot;spu_id&quot;:-5,&quot;sku_name&quot;:12,&quot;sku_desc&quot;:12,&quot;catalog_id&quot;:-5,&quot;brand_id&quot;:-5,&quot;sku_default_img&quot;:12,&quot;sku_title&quot;:12,&quot;sku_subtitle&quot;:12,&quot;price&quot;:3,&quot;sale_count&quot;:-5&#125;,&quot;table&quot;:&quot;pms_sku_info&quot;,&quot;ts&quot;:1745153622947,&quot;type&quot;:&quot;UPDATE&quot;&#125;<br>2025-04-20 20:53:42.996  INFO 59220 --- [ntContainer#0-1] c.m.canal.CanalListerPmsProduct          : canal消息内容：CanalMessage(database=mall-pms, table=pms_sku_info, type=UPDATE, data=[&#123;sku_id=6, spu_id=0, sku_name=经济款Maroon登录77, sku_desc=不会今年提高全国标准比较规定不能责任这里., catalog_id=201203004, brand_id=3001, sku_default_img=https://picsum.photos/301/64, sku_title=昊嘉官方旗舰商品, sku_subtitle=拥有个人积分行业原因专业类别北京地方., price=89.1800, sale_count=271&#125;], old=[&#123;sku_name=经济款Maroon登录7&#125;], ts=1745153622947, pkNames=[sku_id])<br>2025-04-20 20:53:43.225  WARN 59220 --- [ntContainer#0-1] org.elasticsearch.client.RestClient      : request [PUT http://127.0.0.1:9200/pms_sku_info/_doc/6?timeout=1m] returned 1 warnings: [299 Elasticsearch-7.17.3-5ad023604c8d7416c9eb6c0eadb62b14e766caff &quot;Elasticsearch built-in security features are not enabled. Without authentication, your cluster could be accessible to anyone. See https://www.elastic.co/guide/en/elasticsearch/reference/7.17/security-minimal-setup.html to enable security.&quot;]<br>2025-04-20 20:53:43.249  INFO 59220 --- [ntContainer#0-1] c.m.canal.CanalListerPmsProduct          : 同步成功es | index=IndexResponse[index=pms_sku_info,type=_doc,id=6,version=2,result=updated,seqNo=1,primaryTerm=16,shards=&#123;&quot;total&quot;:1,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;]<br>2025-04-20 20:53:43.262  INFO 59220 --- [ntContainer#0-1] c.m.canal.CanalListerPmsProduct          : 同步成功 | skuId=6<br></code></pre></td></tr></table></figure><h3 id="canal-配置"><a href="#canal-配置" class="headerlink" title="canal 配置"></a>canal 配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">canal.mq.topic=pms_sku_sync_queue<br># 交换机名（需与 RabbitMQ 实际配置匹配）<br>rabbitmq.exchange=canal.topic<br># dynamic topic route by schema or table regex<br>#canal.mq.dynamicTopic=mytest1.user,    topic2:mytest2\\..*,.*\\..*<br>canal.mq.partition=0<br></code></pre></td></tr></table></figure><p>查询ES索引中是否同步成功</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">get /pms_sku_info/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/image.png" alt="商品信息"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>canal和MQ选型</title>
    <link href="/2025/04/13/canal%E5%92%8CMQ%E9%80%89%E5%9E%8B/"/>
    <url>/2025/04/13/canal%E5%92%8CMQ%E9%80%89%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<hr><p>在构建实时数据同步或事件驱动架构时，<strong>Canal</strong> 和 <strong>消息队列（MQ）</strong> 的选择并非互斥，而是需要根据业务场景和需求进行组合设计。以下是详细的选型指南和典型方案：</p><hr><h3 id="一、核心定位对比"><a href="#一、核心定位对比" class="headerlink" title="一、核心定位对比"></a><strong>一、核心定位对比</strong></h3><table><thead><tr><th>组件</th><th>核心能力</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Canal</strong></td><td>解析 MySQL Binlog，提供增量数据变更捕获</td><td>数据库到其他存储（如ES、HBase）的实时同步</td></tr><tr><td><strong>消息队列（MQ）</strong></td><td>异步通信、流量削峰、系统解耦、消息持久化</td><td>服务间解耦、事件总线、大数据管道、高并发缓冲</td></tr></tbody></table><hr><h3 id="二、典型场景选型方案"><a href="#二、典型场景选型方案" class="headerlink" title="二、典型场景选型方案"></a><strong>二、典型场景选型方案</strong></h3><h4 id="方案1：纯-Canal-直连消费"><a href="#方案1：纯-Canal-直连消费" class="headerlink" title="方案1：纯 Canal 直连消费"></a><strong>方案1：纯 Canal 直连消费</strong></h4><p><strong>架构</strong>：<br><code>MySQL → 数据消费者（如Java客户端）</code></p><p><strong>适用场景</strong>：<br>• 简单的单消费者数据同步（如同步到Elasticsearch）<br>• 对消息可靠性要求不高（允许偶尔丢失）<br>• 开发测试环境快速验证  </p><p><strong>优势</strong>：<br>• 架构简单，部署成本低<br>• 实时性高（无中间件延迟）  </p><p><strong>劣势</strong>：<br>• 无消息堆积能力，消费者故障导致数据丢失<br>• 多消费者需自行实现分发逻辑  </p><hr><h4 id="方案2：Canal-MQ-组合"><a href="#方案2：Canal-MQ-组合" class="headerlink" title="方案2：Canal + MQ 组合"></a><strong>方案2：Canal + MQ 组合</strong></h4><p><strong>架构</strong>：<br><code>MySQL → Canal → MQ（如Kafka） → 多个消费者</code></p><p><strong>适用场景</strong>：<br>• 需要多消费者订阅同一份数据变更（如同时更新缓存和发通知）<br>• 要求消息持久化和高可靠性<br>• 大数据实时分析（如Flink消费Kafka数据）  </p><p><strong>优势</strong>：<br>• 利用MQ的发布-订阅模型，天然支持多消费者<br>• 消息堆积能力应对消费者故障<br>• MQ的分区机制提升吞吐量  </p><p><strong>劣势</strong>：<br>• 引入MQ增加运维复杂度<br>• 端到端延迟略有增加  </p><hr><h4 id="方案3：纯-MQ-事务消息"><a href="#方案3：纯-MQ-事务消息" class="headerlink" title="方案3：纯 MQ 事务消息"></a><strong>方案3：纯 MQ 事务消息</strong></h4><p><strong>架构</strong>：<br><code>应用 → MQ事务消息 → 消费者</code></p><p><strong>适用场景</strong>：<br>• 业务强一致性要求（如订单创建后发券）<br>• 无数据库Binlog访问权限的跨服务协作<br>• 非数据库变更的事件驱动场景  </p><p><strong>优势</strong>：<br>• 严格保障本地事务与消息发送的原子性<br>• 天然融入微服务架构  </p><p><strong>劣势</strong>：<br>• 无法捕获非业务SQL的变更（如DBA直接操作数据库）<br>• 需改造业务代码埋点  </p><hr><h3 id="三、决策树：如何选择？"><a href="#三、决策树：如何选择？" class="headerlink" title="三、决策树：如何选择？"></a><strong>三、决策树：如何选择？</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">是否需要捕获数据库所有变更？<br>├── 是 → 必须使用 Canal<br>│   └── 是否需要多消费者/高可靠？<br>│       ├── 是 → Canal + MQ（方案2）<br>│       └── 否 → 纯 Canal（方案1）<br>└── 否 → 是否为业务触发的明确事件？<br>    ├── 是 → 使用 MQ 事务消息（方案3）<br>    └── 否 → 结合业务需求定制（可能混合方案）<br></code></pre></td></tr></table></figure><hr><h3 id="四、性能与可靠性对比"><a href="#四、性能与可靠性对比" class="headerlink" title="四、性能与可靠性对比"></a><strong>四、性能与可靠性对比</strong></h3><p>| 指标                | Canal直连           | Canal + MQ          | 纯MQ事务消息         |<br>|———————|———————|————————————–|<br>| 吞吐量              | 中（单线程消费）     | 高（MQ分区并行）     | 高（MQ分区并行）     |<br>| 端到端延迟          | 低（ms级）          | 中（增加MQ转发）     | 低（直接发送）        |<br>| 数据可靠性          | 低（无持久化）       | 高（MQ持久化）       | 高（MQ持久化）        |<br>| 多消费者支持        | 需自行实现           | 原生支持             | 原生支持              |<br>| 架构复杂度          | 简单                | 中等                 | 中等                 |</p><hr><h3 id="五、技术组合推荐"><a href="#五、技术组合推荐" class="headerlink" title="五、技术组合推荐"></a><strong>五、技术组合推荐</strong></h3><h4 id="1-大数据实时分析场景"><a href="#1-大数据实时分析场景" class="headerlink" title="1. 大数据实时分析场景"></a><strong>1. 大数据实时分析场景</strong></h4><p>• <strong>架构</strong>：<code>Canal → Kafka → Flink/Spark</code><br>• <strong>优势</strong>：高吞吐量、低延迟处理海量数据变更日志  </p><h4 id="2-微服务事件驱动架构"><a href="#2-微服务事件驱动架构" class="headerlink" title="2. 微服务事件驱动架构"></a><strong>2. 微服务事件驱动架构</strong></h4><p>• <strong>架构</strong>：<code>应用 → RabbitMQ/RocketMQ事务消息 → 消费者</code><br>• <strong>优势</strong>：保障业务事件与消息的强一致性  </p><h4 id="3-数据库多副本同步"><a href="#3-数据库多副本同步" class="headerlink" title="3. 数据库多副本同步"></a><strong>3. 数据库多副本同步</strong></h4><p>• <strong>架构</strong>：<code>Canal → Kafka → 多个存储（ES、HBase、ClickHouse）</code><br>• <strong>优势</strong>：一份Binlog解析，多端复用  </p><hr><h3 id="六、实施注意事项"><a href="#六、实施注意事项" class="headerlink" title="六、实施注意事项"></a><strong>六、实施注意事项</strong></h3><ol><li><p><strong>Canal 配置优化</strong>：  </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 提升解析性能</span><br><span class="hljs-attr">canal.instance.parser.parallel</span> = <span class="hljs-string">true</span><br><span class="hljs-attr">canal.instance.parser.parallelThreadSize</span> = <span class="hljs-string">8</span><br></code></pre></td></tr></table></figure></li><li><p><strong>MQ 选型建议</strong>：<br>• <strong>Kafka</strong>：大数据量、高吞吐场景<br>• <strong>RocketMQ</strong>：事务消息、顺序消息场景<br>• <strong>RabbitMQ</strong>：复杂路由、低延迟场景  </p></li><li><p><strong>消息格式标准化</strong>：<br>使用统一格式（如Avro、Protobuf）序列化变更事件，避免下游解析混乱。</p></li></ol><hr><p>通过合理选择 Canal 和 MQ 的组合，可构建出兼顾实时性、可靠性和扩展性的数据管道。优先明确业务需求中的 <strong>数据一致性要求</strong>、<strong>消费者数量</strong> 和 <strong>吞吐量指标</strong>，再据此选择最适合的架构方案。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ES实践-索引库创建</title>
    <link href="/2025/04/09/ES%E5%AE%9E%E8%B7%B5-%E7%B4%A2%E5%BC%95%E5%BA%93%E5%88%9B%E5%BB%BA/"/>
    <url>/2025/04/09/ES%E5%AE%9E%E8%B7%B5-%E7%B4%A2%E5%BC%95%E5%BA%93%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>以下是基于 Logstash JDBC 插件实现 MySQL 与 Elasticsearch 数据同步的完整方案，结合多个技术文档的最佳实践：</p><hr><h3 id="一、索引设计策略"><a href="#一、索引设计策略" class="headerlink" title="一、索引设计策略"></a>一、索引设计策略</h3><ol><li><p><strong>字段类型映射</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /pms_sku_info<br> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>     <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;sku_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 精确匹配</span><br>       <span class="hljs-attr">&quot;spu_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 商品SPU聚合</span><br>       <span class="hljs-attr">&quot;sku_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>         <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 中文分词</span><br>         <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;raw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span>  <span class="hljs-comment">// 聚合用</span><br>       <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scaled_float&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scaling_factor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 避免浮点  精度问题</span><br>       <span class="hljs-attr">&quot;sale_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;brand_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;short&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 品牌ID数值化</span><br>       <span class="hljs-attr">&quot;catalog_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span>     <span class="hljs-comment">// 类目树查询</span><br>     <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>分片和副本设置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /pms_sku_info<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;sku_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 精确匹配</span><br>      <span class="hljs-attr">&quot;spu_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 商品SPU聚合</span><br>      <span class="hljs-attr">&quot;sku_name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span>            <span class="hljs-comment">// 中文分词</span><br>        <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;raw&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span>  <span class="hljs-comment">// 聚合用</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;scaled_float&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;scaling_factor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">100</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <span class="hljs-comment">// 避免浮点  精度问题</span><br>      <span class="hljs-attr">&quot;sale_count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;brand_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;short&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>         <span class="hljs-comment">// 品牌ID数值化</span><br>      <span class="hljs-attr">&quot;catalog_id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;keyword&quot;</span> <span class="hljs-punctuation">&#125;</span>     <span class="hljs-comment">// 类目树查询</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;settings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;number_of_shards&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span>          <span class="hljs-comment">// 按数据量估算：每分片约200MB</span><br>      <span class="hljs-attr">&quot;number_of_replicas&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>        <span class="hljs-comment">// 导入时禁用副本提升速度</span><br>      <span class="hljs-attr">&quot;refresh_interval&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;30s&quot;</span><span class="hljs-punctuation">,</span>      <span class="hljs-comment">// 降低实时性换取写入性能</span><br>      <span class="hljs-attr">&quot;index.translog.durability&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;async&quot;</span>  <span class="hljs-comment">// 异步写事务日志</span><br>    <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>通过 <code>WHERE update_time &gt; :sql_last_value</code> 实现增量查询（网页1）</p></li></ol><hr><h3 id="二、关键配置步骤"><a href="#二、关键配置步骤" class="headerlink" title="二、关键配置步骤"></a>二、关键配置步骤</h3><h4 id="1-安装-JDBC-插件"><a href="#1-安装-JDBC-插件" class="headerlink" title="1. 安装 JDBC 插件"></a>1. 安装 JDBC 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更换淘宝镜像源（解决依赖下载问题）</span><br>gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/<br>bin/logstash-plugin install logstash-input-jdbc<br></code></pre></td></tr></table></figure><p>需提前安装 MySQL JDBC 驱动到 <code>/path/to/mysql-connector-java-x.x.x.jar</code>（网页5）</p><h4 id="2-基础配置文件"><a href="#2-基础配置文件" class="headerlink" title="2. 基础配置文件"></a>2. 基础配置文件</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs ruby">input &#123;<br>  jdbc &#123;<br>    jdbc_driver_library =&gt; <span class="hljs-string">&quot;/usr/share/logstash/drivers/mysql-connector-java-8.0.28.jar&quot;</span><br>    jdbc_driver_class =&gt; <span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><br>    jdbc_connection_string =&gt; <span class="hljs-string">&quot;jdbc:mysql://10.0.0.1:3306/product_db&quot;</span><br>    jdbc_user =&gt; <span class="hljs-string">&quot;admin&quot;</span><br>    jdbc_password =&gt; <span class="hljs-string">&quot;secure_pass&quot;</span><br>    statement =&gt; <span class="hljs-string">&quot;SELECT * FROM pms_sku_info WHERE update_time &gt; :sql_last_value&quot;</span><br>    schedule =&gt; <span class="hljs-string">&quot;*/5 * * * *&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  elasticsearch &#123;<br>    hosts =&gt; [<span class="hljs-string">&quot;http://es-node1:9200&quot;</span>]<br>    index =&gt; <span class="hljs-string">&quot;sku_info&quot;</span><br>    document_id =&gt; <span class="hljs-string">&quot;%&#123;sku_id&#125;&quot;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-增量同步优化配置"><a href="#3-增量同步优化配置" class="headerlink" title="3. 增量同步优化配置"></a>3. 增量同步优化配置</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">jdbc &#123;<br>  clean_run =&gt; <span class="hljs-literal">false</span><br>  record_last_run =&gt; <span class="hljs-literal">true</span><br>  lowercase_column_names =&gt; <span class="hljs-literal">false</span>  <span class="hljs-comment"># 保持字段大小写敏感</span><br>  jdbc_default_timezone =&gt; <span class="hljs-string">&quot;Asia/Shanghai&quot;</span>  <span class="hljs-comment"># 时区对齐</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="三、高级功能实现"><a href="#三、高级功能实现" class="headerlink" title="三、高级功能实现"></a>三、高级功能实现</h3><h4 id="1-多表同步方案"><a href="#1-多表同步方案" class="headerlink" title="1. 多表同步方案"></a>1. 多表同步方案</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment"># 创建多个 jdbc 输入块</span><br>input &#123;<br>  jdbc &#123; ... &#125; <span class="hljs-comment"># 表1配置</span><br>  jdbc &#123;<br>    type =&gt; <span class="hljs-string">&quot;order_info&quot;</span>  <span class="hljs-comment"># 添加类型标识</span><br>    statement =&gt; <span class="hljs-string">&quot;SELECT * FROM orders&quot;</span><br>  &#125;<br>&#125;<br><br>output &#123;<br>  <span class="hljs-keyword">if</span> [type] == <span class="hljs-string">&quot;order_info&quot;</span> &#123;<br>    elasticsearch &#123; index =&gt; <span class="hljs-string">&quot;orders&quot;</span> &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    elasticsearch &#123; index =&gt; <span class="hljs-string">&quot;sku_info&quot;</span> &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-数据清洗处理"><a href="#2-数据清洗处理" class="headerlink" title="2. 数据清洗处理"></a>2. 数据清洗处理</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ruby">filter &#123;<br>  mutate &#123;<br>    split =&gt; &#123; <span class="hljs-string">&quot;category&quot;</span> =&gt; <span class="hljs-string">&quot;|&quot;</span> &#125;  <span class="hljs-comment"># 拆分多值字段</span><br>    remove_field =&gt; [<span class="hljs-string">&quot;@version&quot;</span>, <span class="hljs-string">&quot;host&quot;</span>]<br>  &#125;<br>  date &#123;<br>    match =&gt; [<span class="hljs-string">&quot;create_time&quot;</span>, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>]  <span class="hljs-comment"># 时间格式转换</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="四、性能调优建议"><a href="#四、性能调优建议" class="headerlink" title="四、性能调优建议"></a>四、性能调优建议</h3><ol><li><p><strong>连接池配置</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">jdbc &#123;<br>  jdbc_pool_timeout =&gt; <span class="hljs-number">300</span><br>  jdbc_page_size =&gt; <span class="hljs-number">50000</span>  <span class="hljs-comment"># 分页大小（大数据量时启用）</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>批量写入参数</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">elasticsearch &#123;<br>  flush_size =&gt; <span class="hljs-number">1000</span>  <span class="hljs-comment"># 每批提交量</span><br>  idle_flush_time =&gt; <span class="hljs-number">10</span>  <span class="hljs-comment"># 空闲刷新间隔（秒）</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="五、注意事项"><a href="#五、注意事项" class="headerlink" title="五、注意事项"></a>五、注意事项</h3><ol><li><p><strong>数据一致性</strong><br>• 无法直接同步删除操作（需通过软删除字段过滤）<br>• 使用 <code>document_id</code> 避免重复文档</p></li><li><p><strong>错误监控</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f /var/log/logstash/logstash-plain.log | grep <span class="hljs-string">&quot;JDBC exception&quot;</span><br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="典型应用场景对比"><a href="#典型应用场景对比" class="headerlink" title="典型应用场景对比"></a>典型应用场景对比</h3><table><thead><tr><th>场景</th><th>推荐方案</th><th>同步延迟</th><th>开发复杂度</th></tr></thead><tbody><tr><td>全量初始化</td><td>直接执行全表SQL</td><td>高</td><td>低</td></tr><tr><td>分钟级增量同步</td><td>JDBC插件</td><td>中</td><td>中</td></tr><tr><td>秒级实时同步</td><td>Canal+MQ</td><td>低</td><td>高</td></tr></tbody></table><hr><p>通过以上配置，可实现对百万级数据的稳定同步，吞吐量可达 <strong>5000-10000 条&#x2F;秒</strong>。建议首次运行时设置 <code>clean_run =&gt; true</code> 进行全量同步，后续切换为增量模式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高并发缓存设计</title>
    <link href="/2025/04/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/"/>
    <url>/2025/04/06/%E9%AB%98%E5%B9%B6%E5%8F%91%E7%BC%93%E5%AD%98%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<ul><li><p>​<strong>​分布式缓存架构​</strong>​  </p><ul><li>设计多级缓存策略：本地缓存（Caffeine）+ Redis集群（Codis分片），缓存命中率提升至92%  </li><li>解决缓存穿透：布隆过滤器拦截无效请求，减少80%的无效数据库访问  </li><li>优化缓存雪崩：随机过期时间+热点数据永不过期，保障大促期间系统可用性99.99%</li></ul></li><li><p>​<strong>​性能调优​</strong>​  </p><ul><li>Redis单节点QPS从8万提升至15万（Pipeline批处理+连接池优化）  </li><li>通过Redis慢查询日志定位Big Key，将2MB的用户行为日志改用Hash分片存储</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>临时表的产生场景</title>
    <link href="/2025/03/29/%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9A%84%E4%BA%A7%E7%94%9F%E5%9C%BA%E6%99%AF/"/>
    <url>/2025/03/29/%E4%B8%B4%E6%97%B6%E8%A1%A8%E7%9A%84%E4%BA%A7%E7%94%9F%E5%9C%BA%E6%99%AF/</url>
    
    <content type="html"><![CDATA[<p>临时表通常在数据库操作中用于临时存储中间结果，以便简化复杂查询或优化性能。以下是一些常见场景：</p><hr><h3 id="1-复杂查询处理"><a href="#1-复杂查询处理" class="headerlink" title="1. 复杂查询处理"></a>1. <strong>复杂查询处理</strong></h3><p>• <strong>场景</strong>：涉及多步骤的查询（如多层子查询、多表 JOIN）时，数据库可能生成临时表存储中间结果。<br>• <strong>示例</strong>：统计每个地区的销售总额，可能需要先按地区汇总订单数据到临时表，再计算总和。</p><hr><h3 id="2-排序与分组（ORDER-BY-GROUP-BY）"><a href="#2-排序与分组（ORDER-BY-GROUP-BY）" class="headerlink" title="2. 排序与分组（ORDER BY &#x2F; GROUP BY）"></a>2. <strong>排序与分组（ORDER BY &#x2F; GROUP BY）</strong></h3><p>• <strong>场景</strong>：对大量数据排序或分组时，数据库可能用临时表存放中间结果。<br>• <strong>示例</strong>：<code>SELECT * FROM sales ORDER BY amount DESC LIMIT 100</code>，临时表可能用于存储排序后的结果。</p><hr><h3 id="3-窗口函数（Window-Functions）"><a href="#3-窗口函数（Window-Functions）" class="headerlink" title="3. 窗口函数（Window Functions）"></a>3. <strong>窗口函数（Window Functions）</strong></h3><p>• <strong>场景</strong>：使用 <code>ROW_NUMBER()</code>, <code>RANK()</code> 等窗口函数时，可能需要临时表存储中间计算结果。<br>• <strong>示例</strong>：按销售额排名时，临时表可暂存分区和排序后的数据。</p><hr><h3 id="4-数据去重（DISTINCT-GROUP-BY）"><a href="#4-数据去重（DISTINCT-GROUP-BY）" class="headerlink" title="4. 数据去重（DISTINCT &#x2F; GROUP BY）"></a>4. <strong>数据去重（DISTINCT &#x2F; GROUP BY）</strong></h3><p>• <strong>场景</strong>：去重操作可能生成临时表存储唯一值。<br>• <strong>示例</strong>：<code>SELECT DISTINCT user_id FROM orders</code> 会将去重后的数据存入临时表。</p><hr><h3 id="5-优化子查询"><a href="#5-优化子查询" class="headerlink" title="5. 优化子查询"></a>5. <strong>优化子查询</strong></h3><p>• <strong>场景</strong>：复杂子查询可能被优化器转换为临时表，避免重复执行。<br>• <strong>示例</strong>：多次引用的子查询（如 <code>WHERE id IN (SELECT ...)</code>）可能生成临时表提升性能。</p><hr><h3 id="6-UNION-UNION-ALL-操作"><a href="#6-UNION-UNION-ALL-操作" class="headerlink" title="6. UNION &#x2F; UNION ALL 操作"></a>6. <strong>UNION &#x2F; UNION ALL 操作</strong></h3><p>• <strong>场景</strong>：合并多个查询结果时，临时表存储各结果集后再合并。<br>• <strong>示例</strong>：<code>SELECT a FROM t1 UNION SELECT b FROM t2</code> 会先将两个查询结果存入临时表。</p><hr><h3 id="7-会话或事务中的临时存储"><a href="#7-会话或事务中的临时存储" class="headerlink" title="7. 会话或事务中的临时存储"></a>7. <strong>会话或事务中的临时存储</strong></h3><p>• <strong>场景</strong>：在会话或事务中显式创建临时表，存储中间数据供后续操作使用。<br>• <strong>示例</strong>：用户会话中手动创建临时表存储计算过程中的数据。</p><hr><h3 id="8-内存不足时的磁盘写入"><a href="#8-内存不足时的磁盘写入" class="headerlink" title="8. 内存不足时的磁盘写入"></a>8. <strong>内存不足时的磁盘写入</strong></h3><p>• <strong>场景</strong>：当中间结果过大超出内存限制，数据库将数据写入磁盘临时表。<br>• <strong>示例</strong>：处理超大型数据集时，临时表可能存储在磁盘而非内存。</p><hr><h3 id="9-跨数据库或跨实例查询"><a href="#9-跨数据库或跨实例查询" class="headerlink" title="9. 跨数据库或跨实例查询"></a>9. <strong>跨数据库或跨实例查询</strong></h3><p>• <strong>场景</strong>：涉及多个数据库或外部数据源的查询，临时表暂存数据以便关联。<br>• <strong>示例</strong>：从不同数据库实例提取数据并关联时，临时表整合数据。</p><hr><h3 id="10-游标或存储过程"><a href="#10-游标或存储过程" class="headerlink" title="10. 游标或存储过程"></a>10. <strong>游标或存储过程</strong></h3><p>• <strong>场景</strong>：在存储过程或游标处理中，临时表用于分步处理数据。<br>• <strong>示例</strong>：逐行处理数据时，临时表暂存批量处理的结果。</p><hr><h3 id="临时表的生命周期"><a href="#临时表的生命周期" class="headerlink" title="临时表的生命周期"></a>临时表的生命周期</h3><p>• <strong>会话级临时表</strong>：仅存在于当前会话，会话结束自动删除。<br>• <strong>事务级临时表</strong>：仅存在于当前事务，事务提交后自动删除。</p><hr><p>通过合理使用临时表，可以显著提升复杂查询的效率，但需注意其可能带来的磁盘 I&#x2F;O 开销。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>synchronized为什么会有数据不一致的情况</title>
    <link href="/2025/03/29/synchronized%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E6%83%85%E5%86%B5/"/>
    <url>/2025/03/29/synchronized%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E7%9A%84%E6%83%85%E5%86%B5/</url>
    
    <content type="html"><![CDATA[<p>在 Java 中，<code>synchronized</code> 关键字本意是解决多线程并发问题，<strong>保证线程安全</strong>，但如果在使用过程中设计不当，仍可能导致数据不一致。以下是 <code>synchronized</code> 可能导致数据不一致的常见原因：</p><hr><h3 id="1-同步范围不足（部分代码未同步）"><a href="#1-同步范围不足（部分代码未同步）" class="headerlink" title="1. 同步范围不足（部分代码未同步）"></a>1. <strong>同步范围不足（部分代码未同步）</strong></h3><p>• <strong>问题</strong>：如果只对部分操作加锁，而其他线程能绕过同步代码修改共享数据，会导致数据不一致。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Counter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">increment</span><span class="hljs-params">()</span> &#123;<br>        count++;  <span class="hljs-comment">// 同步的代码块</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 未同步的方法</span><br>        <span class="hljs-keyword">return</span> count;        <span class="hljs-comment">// 可能读到脏数据</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：<code>getCount()</code> 未加锁，其他线程可能在 <code>increment()</code> 执行期间读取到未更新的值。</p><hr><h3 id="2-未保证操作的原子性"><a href="#2-未保证操作的原子性" class="headerlink" title="2. 未保证操作的原子性"></a>2. <strong>未保证操作的原子性</strong></h3><p>• <strong>问题</strong>：即使某个方法是同步的，如果多个相关操作未作为一个整体加锁，仍可能导致中间状态暴露。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-comment">// 转账操作未整体加锁</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transfer</span><span class="hljs-params">(Account target, <span class="hljs-type">int</span> amount)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-built_in">this</span>.balance -= amount;<br>        &#125;<br>        <span class="hljs-comment">// 此处未同步，其他线程可能修改 target.balance</span><br>        <span class="hljs-keyword">synchronized</span> (target) &#123;<br>            target.balance += amount;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：转账操作被拆分为两个独立的同步块，可能导致中间状态（如 <code>this.balance</code> 已扣款，但 <code>target.balance</code> 未到账）。</p><hr><h3 id="3-锁对象不一致"><a href="#3-锁对象不一致" class="headerlink" title="3. 锁对象不一致"></a>3. <strong>锁对象不一致</strong></h3><p>• <strong>问题</strong>：不同线程使用不同的锁对象，导致同步失效。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock1) &#123;  <span class="hljs-comment">// 使用 lock1 加锁</span><br>            value++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock2) &#123;  <span class="hljs-comment">// 使用 lock2 加锁</span><br>            <span class="hljs-keyword">return</span> value;       <span class="hljs-comment">// 锁不一致，无法互斥</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：<code>update()</code> 和 <code>get()</code> 使用不同的锁对象，无法保证互斥访问。</p><hr><h3 id="4-静态与非静态锁混淆"><a href="#4-静态与非静态锁混淆" class="headerlink" title="4. 静态与非静态锁混淆"></a>4. <strong>静态与非静态锁混淆</strong></h3><p>• <strong>问题</strong>：静态方法使用 <code>Class</code> 锁，实例方法使用对象锁，可能导致非预期的并发访问。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 类锁</span><br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSomething</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">// 对象锁</span><br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：<code>getInstance()</code> 使用类锁，<code>doSomething()</code> 使用对象锁，两者不互斥，可能导致实例未完全初始化就被调用。</p><hr><h3 id="5-可见性问题未解决"><a href="#5-可见性问题未解决" class="headerlink" title="5. 可见性问题未解决"></a>5. <strong>可见性问题未解决</strong></h3><p>• <strong>问题</strong>：<code>synchronized</code> 能保证可见性，但如果共享变量在同步块外被修改，可能导致不一致。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisibilityDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 未用 volatile</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            flag = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 同步块内修改</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123;  <span class="hljs-comment">// 未加锁，可能看不到最新值</span><br>            System.out.println(<span class="hljs-string">&quot;Flag is true&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：<code>reader()</code> 未加锁，可能因 JVM 内存模型（如缓存一致性）读取到旧值。</p><hr><h3 id="6-锁未覆盖复合操作"><a href="#6-锁未覆盖复合操作" class="headerlink" title="6. 锁未覆盖复合操作"></a>6. <strong>锁未覆盖复合操作</strong></h3><p>• <strong>问题</strong>：多个相关操作未作为一个原子操作加锁。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cache</span> &#123;<br>    <span class="hljs-keyword">private</span> Map&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String key, String value)</span> &#123;<br>        map.put(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-keyword">return</span> map.containsKey(key);  <span class="hljs-comment">// 未加锁，可能返回过期结果</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：<code>contains()</code> 未加锁，可能读到 <code>add()</code> 尚未完成的状态。</p><hr><h3 id="7-对象逸出（Improper-Publication）"><a href="#7-对象逸出（Improper-Publication）" class="headerlink" title="7. 对象逸出（Improper Publication）"></a>7. <strong>对象逸出（Improper Publication）</strong></h3><p>• <strong>问题</strong>：对象未完全构造完成就被其他线程访问，即使后续操作同步，初始状态可能不一致。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnsafePublish</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnsafePublish</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            System.out.println(<span class="hljs-built_in">this</span>.value);  <span class="hljs-comment">// 可能读到未初始化的 0</span><br>        &#125;).start();<br>        value = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 在构造函数中赋值</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>原因</strong>：构造函数中启动的线程可能看到未完全初始化的对象（<code>value</code> 未被赋值为 42）。</p><hr><h3 id="8-锁粒度不当"><a href="#8-锁粒度不当" class="headerlink" title="8. 锁粒度不当"></a>8. <strong>锁粒度不当</strong></h3><p>• <strong>问题</strong>：锁粒度过大或过小，导致性能问题或逻辑错误。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoarseLock</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> a, b;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            a++;<br>            b--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">return</span> a + b;  <span class="hljs-comment">// 锁粒度过大，可能导致不必要的阻塞</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>优化</strong>：若 <code>a</code> 和 <code>b</code> 可独立操作，拆分为细粒度锁可能更高效。</p><hr><h3 id="9-线程间协作问题（如-wait-notify）"><a href="#9-线程间协作问题（如-wait-notify）" class="headerlink" title="9. 线程间协作问题（如 wait&#x2F;notify）"></a>9. <strong>线程间协作问题（如 wait&#x2F;notify）</strong></h3><p>• <strong>问题</strong>：使用 <code>wait()</code> 或 <code>notify()</code> 时未正确同步，可能导致虚假唤醒或条件失效。<br>• <strong>示例</strong>：<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskQueue</span> &#123;<br>    <span class="hljs-keyword">private</span> Queue&lt;Task&gt; queue = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Task task)</span> &#123;<br>        queue.add(task);<br>        notify();  <span class="hljs-comment">// 通知等待线程</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Task <span class="hljs-title function_">get</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">while</span> (queue.isEmpty()) &#123;<br>            wait();  <span class="hljs-comment">// 未在循环中检查条件，可能虚假唤醒</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> queue.remove();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br>  • <strong>正确写法</strong>：<code>while (queue.isEmpty())</code> 代替 <code>if</code>，防止虚假唤醒。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>synchronized</code> 本身是线程安全的工具，但需满足以下条件才能保证数据一致性：</p><ol><li><strong>原子性</strong>：所有相关操作必须作为一个整体加锁。</li><li><strong>可见性</strong>：通过锁的进入和退出强制刷新内存。</li><li><strong>锁一致性</strong>：所有线程必须使用同一个锁对象。</li><li><strong>正确的线程协作</strong>：合理使用 <code>wait()</code>&#x2F;<code>notify()</code>。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/03/26/hello-world/"/>
    <url>/2025/03/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
